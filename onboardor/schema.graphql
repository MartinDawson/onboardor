# source: https://localhost:49891/graphql
# timestamp: Sat Aug 18 2018 12:55:09 GMT+0200 (W. Europe Daylight Time)

input AddOnboardingPipelineInput {
  clientMutationId: String = null
  organizationId: Int!
  name: String!
}

type AddOnboardingPipelinePayload {
  clientMutationId: String
  organization: Organization!
}

input CreateOnboardingProcessInput {
  clientMutationId: String = null
  organizationId: Int!
  steps: [String]!
}

type CreateOnboardingProcessPayload {
  clientMutationId: String
}

"""
The `Date` scalar type represents a timestamp provided in UTC. `Date` expects
timestamps to be formatted in accordance with the
[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
"""
scalar Date

scalar Decimal

type Member implements Node {
  avatarUrl: String!
  email: String!

  """The Global Id of the Member"""
  id: ID!
  isBeingOnboarded: Boolean!

  """The Id of the Member"""
  memberId: Int!
  name: String!
  organizations: [Organization]!
}

type Mutation {
  addPipeline(input: AddOnboardingPipelineInput!): AddOnboardingPipelinePayload
  createOnboardingProcess(input: CreateOnboardingProcessInput!): CreateOnboardingProcessPayload
  setOnboardingMembers(input: SetOnboardingMembersInput!): SetOnboardingMembersPayload
  subscribeMailingList(input: SubscribeMailingListInput!): SubscribeMailingListPayload
}

interface Node {
  """Global node Id"""
  id: ID
}

type OnboardingPipeline implements Node {
  """The Global Id of the OnboardingPipeline"""
  id: ID!
  name: String!

  """The Id of the OnboardingPipeline"""
  onboardingPipelineId: Int!
  onboardingSteps: [OnboardingStep]!
}

type OnboardingStep implements Node {
  description: String

  """The Global Id of the OnboardingStep"""
  id: ID!
  name: String!

  """The Id of the OnboardingStep"""
  onboardingStepId: Int!
}

type Organization implements Node {
  avatarUrl: String!

  """The Global Id of the Organization"""
  id: ID!
  members: [Member]!
  name: String!
  onboardingPipelines: [OnboardingPipeline]!

  """The Id of the Organization"""
  organizationId: Int!
}

type Query {
  """Fetches an object given its global Id"""
  node(
    """The global Id of the object"""
    id: ID!
  ): Node
  organizations: [Organization]!

  """
  Returns the url for the OAUTH request or null if the user already authorized
  """
  setup(
    """The absolute url to redirect to"""
    redirectUrl: String = null
  ): String
  setupCallback(
    """The code for the setup"""
    code: String!

    """The CSRF protection state"""
    state: String!
  ): Boolean!
}

input SetOnboardingMembersInput {
  clientMutationId: String = null
  memberIds: [Int]!
}

type SetOnboardingMembersPayload {
  clientMutationId: String
}

input SubscribeMailingListInput {
  clientMutationId: String = null
  email: String!
  recaptcha: String!
}

type SubscribeMailingListPayload {
  clientMutationId: String
}
