# source: http://localhost:49891/graphql
# timestamp: Sun Oct 14 2018 11:31:26 GMT+0200 (W. Europe Daylight Time)

input AddOnboardingPipelineInput {
  clientMutationId: String = null
  organizationId: Int!
  memberId: Int = null
  name: String!
}

type AddOnboardingPipelinePayload {
  clientMutationId: String
  organization: Organization!
}

input AddOnboardingProcessInput {
  clientMutationId: String = null
  organizationId: Int!
  name: String!
  pipelineIds: [Int]!
}

type AddOnboardingProcessPayload {
  clientMutationId: String
  organization: Organization!
}

input AddOnboardingProcessToMemberInput {
  clientMutationId: String = null
  memberId: Int!
  processId: Int!
}

type AddOnboardingProcessToMemberPayload {
  clientMutationId: String
  member: Member!
}

input AddOnboardingStepInput {
  clientMutationId: String = null
  pipelineId: Int!
  memberId: Int = null
  organizationName: String!
  name: String!
}

type AddOnboardingStepPayload {
  clientMutationId: String
  pipeline: OnboardingPipeline!
}

input CreateOnboardingProcessInput {
  clientMutationId: String = null
  organizationId: Int!
  steps: [String]!
}

type CreateOnboardingProcessPayload {
  clientMutationId: String
}

"""
The `Date` scalar type represents a timestamp provided in UTC. `Date` expects
timestamps to be formatted in accordance with the
[ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
"""
scalar Date

scalar Decimal

input EditOnboardingPipelineInput {
  clientMutationId: String = null
  id: Int!
  name: String!
}

type EditOnboardingPipelinePayload {
  clientMutationId: String
  organization: Organization!
}

input EditOnboardingStepInput {
  clientMutationId: String = null
  id: Int!
  name: String!
}

type EditOnboardingStepPayload {
  clientMutationId: String
  pipeline: OnboardingPipeline!
}

type Member implements Node {
  avatarUrl: String!

  """The Global Id of the Member"""
  id: ID!
  isBeingOnboarded: Boolean!

  """The Id of the Member"""
  memberId: Int!
  name: String!

  """The process that the member is being onboarded by"""
  onboardingProcess: OnboardingProcess
  organizations: [Organization]!
}

type Mutation {
  addOnboardingProcessToMember(input: AddOnboardingProcessToMemberInput!): AddOnboardingProcessToMemberPayload
  addPipeline(input: AddOnboardingPipelineInput!): AddOnboardingPipelinePayload
  addProcess(input: AddOnboardingProcessInput!): AddOnboardingProcessPayload
  addStep(input: AddOnboardingStepInput!): AddOnboardingStepPayload
  createOnboardingProcess(input: CreateOnboardingProcessInput!): CreateOnboardingProcessPayload
  editPipeline(input: EditOnboardingPipelineInput!): EditOnboardingPipelinePayload
  editStep(input: EditOnboardingStepInput!): EditOnboardingStepPayload
  removePipeline(input: RemoveOnboardingPipelineInput!): RemoveOnboardingPipelinePayload
  removeStep(input: RemoveOnboardingStepInput!): RemoveOnboardingStepPayload
  setOnboardingMembers(input: SetOnboardingMembersInput!): SetOnboardingMembersPayload
  setup(input: SetupInput!): SetupPayload
  subscribeMailingList(input: SubscribeMailingListInput!): SubscribeMailingListPayload
}

interface Node {
  """Global node Id"""
  id: ID
}

type OnboardingPipeline implements Node {
  """The Global Id of the OnboardingPipeline"""
  id: ID!
  name: String!

  """The Id of the OnboardingPipeline"""
  onboardingPipelineId: Int!
  onboardingProcess: OnboardingProcess
  onboardingSteps: [OnboardingStep]!
  organization: Organization
}

type OnboardingProcess implements Node {
  closedSteps: [OnboardingStep]!

  """The Global Id of the OnboardingProcess"""
  id: ID!
  name: String!
  onboardingPipelines: [OnboardingPipeline]!

  """The Id of the OnboardingProcess"""
  onboardingProcessId: Int!
  organization: Organization
}

type OnboardingStep implements Node {
  """The Global Id of the OnboardingStep"""
  id: ID!
  isClosed: Boolean!
  issueNumber: Int!
  name: String!

  """The Id of the OnboardingStep"""
  onboardingStepId: Int!
}

type Organization implements Node {
  avatarUrl: String!

  """The Global Id of the Organization"""
  id: ID!
  member(
    """The id of the member to get"""
    id: Int = null
  ): Member
  members: [Member]!
  name: String!
  onboardingPipelines: [OnboardingPipeline]!
  onboardingProcesses: [OnboardingProcess]!
  onboardingSteps: [OnboardingStep]!

  """The Id of the Organization"""
  organizationId: Int!
}

type Query {
  """Fetches an object given its global Id"""
  node(
    """The global Id of the object"""
    id: ID!
  ): Node
  organizations: [Organization]!
  setupCallback(
    """The code for the setup"""
    code: String!

    """The CSRF protection state"""
    state: String!
  ): Boolean!
}

input RemoveOnboardingPipelineInput {
  clientMutationId: String = null
  id: Int!
}

type RemoveOnboardingPipelinePayload {
  clientMutationId: String
  organization: Organization!
}

input RemoveOnboardingStepInput {
  clientMutationId: String = null
  id: Int!
}

type RemoveOnboardingStepPayload {
  clientMutationId: String
  pipeline: OnboardingPipeline!
}

input SetOnboardingMembersInput {
  clientMutationId: String = null
  memberIds: [Int]!
}

type SetOnboardingMembersPayload {
  clientMutationId: String
}

input SetupInput {
  clientMutationId: String = null
  redirectUrl: String = null
}

type SetupPayload {
  clientMutationId: String
  oAuthLoginUrl: String!
}

input SubscribeMailingListInput {
  clientMutationId: String = null
  email: String!
  recaptcha: String!
}

type SubscribeMailingListPayload {
  clientMutationId: String
}
